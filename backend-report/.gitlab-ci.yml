# В нашем Gitlab для сборки контейнеров воспользуемся Докером в Докере :)  
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-kubernetes-executor-with-docker-in-docker
# Для сборки образов с использованием Docker-in-Docker:
# добавить в код Downstream пайплайнов в секцию include подготовленный шаблон, содержащий необходимые настройки:
#  https://gitlab.praktikum-services.ru/templates/ci/-/blob/main/DockerInDockerTemplate.yml
# использовать в задачах сборки в качестве образа стабильную версию образа Docker:dind docker:20.10.12-dind-rootless
#

variables:
    VERSION: 1.0.${CI_PIPELINE_ID}
    SAST_EXCLUDED_ANALYZERS: "eslint-sast, nodejs-scan-sast, spotbugs-sast"

include:
  - remote: 'https://gitlab.com/gitlab-org/gitlab/-/raw/2851f4d5/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml'
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
  # - template: Security/SAST.gitlab-ci.yml
    
stages:
  - build
  - test
  - release
  - deploy

build-backend-report:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend-report
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA

sonarqube-test-back-report:
  stage: test
  image: sonarsource/sonar-scanner-cli
  script:
    - cd backend-report
    - >
      sonar-scanner
      -Dsonar.projectKey=${KEY_REPORT}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${LOGIN_REPORT}
      -Dsonar.projectName=13___Зачитайлов_Репорт
  cache:
    paths:
      - .app/ # для хранения зависимостей репорт

upload-backend-report-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/backend-report:latest
    - docker push $CI_REGISTRY_IMAGE/backend-report:latest
  needs:
    - sonarqube-test-back-report

deploy-backend-report:
  stage: deploy
  image: vault:1.11.3
  # если хотим сделать деплой по кнопке
  # rules:
  #   - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #     when: manual
  #   - if: '$CI_COMMIT_BRANCH == "master"'
  #     when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - echo "" >> ${env_file_report}
    - echo DB=$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store) >> ${env_file_report}
    - scp ${env_file_report} ${DEV_USER}@${DEV_HOST}:/home/deployservice
    - scp docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/deployservice
    - ssh ${DEV_USER}@${DEV_HOST}
       "export "VERSION=${VERSION}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY=${CI_REGISTRY}";
      /bin/bash -s " < ./backend-report/backend-report_deploy.sh
