cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
   - build
   - test
   - release
   - notify
   - deploy

build-backend:
   stage: build
   script:
      - cd backend
      - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
   rules: # rules и only в данных случаях взаимозаменяемы
      - changes:
           - backend/*

spotbugs-sast:
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - backend/*
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository # не забудьте при сборке также указывать эту папку через аргумент -Dmaven.repo.local
  needs:
    - build-backend

release-backend:
   stage: release
   script:
      - cd backend
      - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml
   rules:
      - changes:
           - backend/*

sonarqube-test-back:
  stage: test
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${LOGIN_BACK}
      -Dsonar.projectName=13__ЗАЧИТАЙЛОВАНДРЕЙ_БЭКЭНД
  cache:
    paths:
      - ${CI_PROJECT_DIR}/.m2/repository # для хранения зависимостей бэкенда

pachca-notification-backend:
  stage: notify
  only:
    changes:
    - backend/*
  script:
    - "curl -X POST -H 'Content-type: application/json' --data '{\"message\":\"Вышла новая версия backend сосисочной — '${VERSION}'. Скачать backend можно по ссылке '${NEXUS_REPO_URL}'/sausage-store-zachitaylov-andrey-backend/com/yandex/practicum/devops/sausage-store/'${VERSION}'/sausage-store-'${VERSION}'.jar\"}' https://api.pachca.com/webhooks/01GHKAEEBHC027DJAH7CHPTVF1"
  needs:
    - build-backend

before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  #сохраняем сгенеренный ранее приватный ключ для раннера
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 600 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

deploy-backend:
  stage: deploy
  script:
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./backend/deploy.sh
