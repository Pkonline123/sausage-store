# В нашем Gitlab для сборки контейнеров воспользуемся Докером в Докере :)  
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-kubernetes-executor-with-docker-in-docker
# Для сборки образов с использованием Docker-in-Docker:
# добавить в код Downstream пайплайнов в секцию include подготовленный шаблон, содержащий необходимые настройки:
#  https://gitlab.praktikum-services.ru/templates/ci/-/blob/main/DockerInDockerTemplate.yml
# использовать в задачах сборки в качестве образа стабильную версию образа Docker:dind docker:20.10.12-dind-rootless
#
variables:
    VERSION: 1.0.${CI_PIPELINE_ID}
#    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
#    JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
    
stages:
  - build
  - release
  - deploy

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
  # rules:
  #   - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #     when: manual
  #   - if: '$CI_COMMIT_BRANCH == "master"'
  #     when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}";
       export "SPRING_DATASOURCE_USERNAME=${PSQL_USER}";
       export "SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}";
       export "SPRING_DATA_MONGODB_URI=${MONGO_DATA}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY=${CI_REGISTRY}";
      /bin/bash -s " < ./frontend/frontend_deploy.sh

# cache:
#   paths:
#     - frontend/dist/frontend

# variables:
#   SECURE_LOG_LEVEL: "debug"
#   VERSION: 1.0.${CI_PIPELINE_ID}

# stages:
#    - build
#    - test
#    - release
#    - notify
#    - deploy

# include:
#   - template: Security/SAST.gitlab-ci.yml

# build-frontend:
#    stage: build
#    script:
#      - cd frontend
#      - npm install
#      - npm run build
#    only:
#      changes:
#      - frontend/*
#    artifacts:
#     paths:
#      - frontend/dist/frontend

# release-frontend:
#    stage: release
#    script:
#      - cd frontend/dist
#      - tar czvf sausage-store-${VERSION}.tar.gz frontend
#      - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/sausage-store-zachitaylov-andrey-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz 
#    only:
#      changes:
#      - frontend/*

# sonarqube-test-front:
#   stage: test
#   image: sonarsource/sonar-scanner-cli
#   script:
#     - cd frontend
#     - >
#       sonar-scanner
#       -Dsonar.projectKey=${PROJECT_KEY_FRONT}
#       -Dsonar.sources=.
#       -Dsonar.host.url=${SONARQUBE_URL}
#       -Dsonar.login=${LOGIN_FRONT}
#       -Dsonar.projectName=13_ЗАЧИТАЙЛОВАНДРЕЙ_ФРОНТЕНД
#   cache:
#     paths:
#       - .npm/ # для хранения зависимостей сборки фронтенда

# pachca-notification-frontend:
#   stage: notify
#   only:
#     changes:
#     - frontend/*
#   script:
#     - "curl -X POST -H 'Content-type: application/json' --data '{\"message\":\"Вышла новая версия frontend сосисочной — '${VERSION}'. Скачать frontend можно по ссылке '${NEXUS_REPO_URL}'/sausage-store-zachitaylov-andrey-frontend/sausage-store/'${VERSION}'/sausage-store-'${VERSION}'.tar.gz\"}' https://api.pachca.com/webhooks/01GHKAEEBHC027DJAH7CHPTVF1"
#   needs:
#     - release-frontend

# deploy-frontend:
#   stage: deploy
#   before_script:
#     #устанавливаем ssh-agent для удобства аутентификации по ssh
#     - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     #сохраняем сгенеренный ранее приватный ключ для раннера
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 600 ~/.ssh
#     - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - scp ./frontend/sausage-store-frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-frontend.service
#     - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./frontend/deploy.sh
#   environment:
#     name: staging
#     url: http://std-013-20.praktikum-services.tech/# 
